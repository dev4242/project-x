# ## This title will be seen in the pdf properties/meta data
#+LATEX_HEADER: \newcommand{\mytitle}{Designing CI-Flows Part 1}
#+TITLE: \mytitle\normalsize\newline\emph{CI for thousands of developer}
#+AUTHOR:
#+LATEX_HEADER: \usepackage{xcolor, listings, stmaryrd, alltt, tikz, setspace, xspace, hyperref, minted}
#+LATEX_HEADER: \usetikzlibrary{quotes,arrows,arrows.meta,shapes,calc,positioning,spy,decorations.pathmorphing,fit}
#+LATEX_HEADER: \definecolor{myblue}{HTML}{05ADF3}
#+LATEX_HEADER: \hypersetup{colorlinks, urlcolor=myblue, linkcolor=myblue}
#+LATEX_CLASS: beamer
# #+LATEX_CLASS_OPTIONS: [handout]
#+OPTIONS: num:t toc:nil f:nil ::nil h:1
#+LANGUAGE: en

#+BEGIN_EXPORT latex
\pdfinfo{
/Title (\mytitle)
}

\newminted{bash}{fontsize=\scriptsize,highlightcolor=cyan}

\definecolor{mygray}{rgb}{0.9,0.9,1}
\definecolor{mygreen}{rgb}{0.1,0.85,0.1}

\lstnewenvironment{xml}[1][]{
  \lstset{language=xml,
          basicstyle=\scriptsize\ttfamily,
          breaklines=true,
          commentstyle=\itshape\color{purple!70!white},
          backgroundcolor=\color{mygray},
          framexleftmargin=4pt,
          frame=none,
          mathescape=false,
          columns=flexible,
          showstringspaces=false,
          escapeinside={<@}{@>},
          moredelim=**[is][\color{mygreen}]{@}{@},
          moredelim=**[is][\only<+>{\color{red}}]{<+}{+>},
          moredelim=**[is][\only<.>{\color{red}}]{<.}{.>},
          #1
          }
  }
  {}

\lstnewenvironment{java}[1][]{
  \lstset{language=java,
          basicstyle=\scriptsize\ttfamily,
          breaklines=true,
          commentstyle=\itshape\color{purple!70!white},
          backgroundcolor=\color{mygray},
          framexleftmargin=4pt,
          frame=none,
          mathescape=false,
          keywordstyle=\color{blue},
          columns=flexible,
          showstringspaces=false,
          escapeinside={<@}{@>},
          moredelim=**[is][\only<+>{\color{red}}]{<+}{+>},
          moredelim=**[is][\only<.>{\color{red}}]{<.}{.>},
          #1
          }
  }
  {}

\newcommand{\td}[0]{\texttt{\$}}
\newcommand{\mt}[0]{\Longmapsto}

\setbeamercovered{transparent=40}
\newcommand{\myalert}[2]{\alert<#1|nohandout>{#2}}
\newcommand{\myonly}[2]{\only<#1|nohandout>{#2}}
\newcommand{\myonslide}[2]{\onslide<#1|nohandout>{#2}}
\newcommand{\mynote}[0]{\emph{\textcolor{blue}{Note: }}}

\tikzset{onslide/.code args={<#1>#2}{%
  \only<#1>{\pgfkeysalso{#2}}
}}

\tikzstyle{box} = [fill=blue!10, draw, rounded corners, thick, inner sep=7, font=\bf, align=center]
\tikzstyle{myarrow} = [-{Latex[length=1.8mm,width=1.8mm]}, line width=0.3mm]
\tikzstyle{myarrow2} = [-{Latex[length=1.8mm,width=1.8mm]}, dashed, line width=0.3mm]
% Page numbering on slides
\addtobeamertemplate{navigation symbols}{}{%
    \usebeamerfont{footline}%
    \usebeamercolor[fg]{footline}%
    \hspace{1em}%
    \insertframenumber/\inserttotalframenumber
}
#+END_EXPORT

* Disclaimer:
  \pause
  - Layman's experience from the trenches \pause
  - AKA: /\myalert{3}{Davids opinion considered harmful!}/

* Who am I
  \setbeamercovered{transparent=0}
  - Sigma and Ericsson since 2014 \pause
    - Radio Base Station \pause
  - Feature developer \rightarrow troubleshooter \rightarrow
    development environment\pause \rightarrow Flow Guardian

  \setbeamercovered{transparent=40}
  \begin{figure}
  \begin{tikzpicture}[auto, >=stealth', scale=0.8, node distance=0.5cm, every node/.style={transform shape}]
  \centering
  \draw[draw=none, use as bounding box] (-6.5,-5) rectangle (6.5,5);
  \node<5> at (0,1.5) {\includegraphics[width=14cm]{./Flow-Masters-logo}};
  \end{tikzpicture}
  \end{figure}

* Ericsson RBS
  \centering
  [[./antennas.jpg]]

* Ericsson RBS
  - Around 10 000 developers \pause
  - All developing for Radio Base Station \pause
    - Different sub-organizations, different responsibilities \pause
    - Sigma, one sub-org (CAT) \approx 700 developers \pause
  - Gerrit / Git / Jenkins / Jira / (Eiffel) \pause
  - + in-house tools

  \begin{figure}
  \begin{tikzpicture}[overlay,auto, >=stealth', scale=0.8, node distance=0.5cm, every node/.style={transform shape}]
  \centering
  \draw[draw=none, use as bounding box] (-6.5,-5) rectangle (6.5,5);
  \node<4> at (4,5.5) {\includegraphics[width=1cm]{./cat}};
  \end{tikzpicture}
  \end{figure}

* What is CI for you?

* Basic CI
  \begin{figure}
  \begin{tikzpicture}[auto, >=stealth', scale=0.9, node distance=0.5cm, every node/.style={transform shape}]
  \centering
  \draw[draw=none, use as bounding box] (-6.5,-5) rectangle (6.5,5);
  \node[box] (1) at (-2,2) {Commit};
  \node<2->[box, below=of 1] (2) {Build};
  \draw<2->[myarrow] (1) -- (2);
  \node<3->[box, right=of 2, xshift=1cm] (3) {Test};
  \draw<3->[myarrow] (2) -- (3);
  \node<4->[box, above=of 3] (4) {Feedback};
  \draw<4->[myarrow] (3) -- (4);
  \draw<4->[myarrow] (4) -- (1);
  \end{tikzpicture}
  \end{figure}

* Big CI Problems
  - Test scope \pause
    - Can we run all tests? \pause
    - Where should tests run? \pause
    - \myalert{8}{Are all tests passing?} \pause
  - \myalert{8}{Tracking} \pause
    - Where is my commit? \pause
    - Is my commit ok? \pause \pause
  - Intermittency \pause
    - Lots of tests + intermittent tests \equiv \myalert{10}{no flow} \pause
  - Lead time \pause
    - Feedback loop \pause
  - Many developers \pause
    - \rightarrow Many Bottlenecks \pause
    - Dependencies (expected and unexpected!)

* CI from the CI Flow Plumber's point of view
  - Modularization \pause
  - Logging \pause \bigskip


  - \myalert{3}{Non-exhaustive list!} \pause
    - Speed
    - Stability
    - Scalability
    - Reproducibility
    - ...

* Modularization
  :PROPERTIES:
  :BEAMER_opt: label=modularization
  :BEAMER_act: 1-9
  :END:


  #+BEGIN_EXPORT latex
  \tikzstyle{mytext} = [fill=yellow!10, draw=blue, thick, inner sep=5, align=center]
  \tikzstyle{mytext2} = [scale=0.77, fill=yellow!10, draw=black, thick, inner sep=5, align=center,font=\bf]
  \tikzstyle{mytext3} = [fill=red!10, draw=blue, thick, inner sep=5, align=center, scale=2, ellipse]
  \tikzstyle{mytext4} = [fill=yellow!10, dashed, draw=blue, thick, inner sep=5, align=center, scale=1.5, rounded corners]

  \begin{figure}
  \begin{tikzpicture}[auto, >=stealth', scale=0.7, node distance=0.4cm, every node/.style={transform shape}]
  \centering
  \draw[draw=none, use as bounding box] (-6.5,-5) rectangle (6.5,5);
  \node[box] (1) at (-7.2,0) {Commit};
  \node[box, right=of 1, onslide={<10>{draw=red}}] (2) {Host\\test};
  \draw[myarrow] (1) -- (2);
  \node[box, right=of 2] (3) {Merge};
  \draw[myarrow] (2) -- (3);
  \node[box, right=of 3, onslide={<10>{draw=red}}] (4) {Build};
  \draw[myarrow] (3) -- (4);
  \node[box, right=of 4] (5) {App\\Integration\\on LSV};
  \draw[myarrow] (4) -- (5);
  \node[box, right=of 5] (6) {LSV\\Integration};
  \draw[myarrow] (5) -- (6);
  \node[box, right=of 6] (7) {Test++};
  \draw[myarrow] (6) -- (7);

  \node<2,3|nohandout>[mytext4, below=of 2, yshift=-0.7cm] (10000) {10 000\\developers};
  \draw<2,3>[myarrow2] (10000) -- (1);

  \node<3|nohandout>[mytext3, above=of 4, yshift=1.2cm] (b) {Bottleneck};
  \draw<3>[myarrow2] (b) -- (2);
  \draw<3>[myarrow2] (b) -- (3);
  \draw<3>[myarrow2] (b) -- (4);
  \draw<3>[myarrow2] (b) -- (5);
  \draw<3>[myarrow2] (b) -- (6);
  \draw<3>[myarrow2] (b) -- (7);

  \node<4->[box, below=of 1, yshift=-0.6cm, onslide={<4>{draw=red}}] (c2) {Commit};
  \node<4->[box, right=of c2, onslide={<4,10>{draw=red}}] (h2) {Host\\test};
  \node<4->[box, below=of c2, yshift=-0.6cm, onslide={<4>{draw=red}}] (c3) {Commit};
  \node<4->[box, right=of c3, onslide={<4,10>{draw=red}}] (h3) {Host\\test};
  \node<4->[below=of c3, yshift=-0.6cm] {\bf\Huge{}\alert<4>{...}};
  \draw<4->[myarrow] (c2) -- (h2);
  \draw<4->[myarrow] (h2) -- (3);
  \draw<4->[myarrow] (c3) -- (h3);
  \draw<4->[myarrow] (h3) -- (3);

  \node<5->[box, above=of 5, yshift=1cm, onslide={<5>{draw=red}}] (m2) {App\\Integration\\on LSV};
  \node<5->[box, left=of m2, onslide={<5>{draw=red}}] (r2) {Build};
  \node<5->[above=of m2, yshift=0.6cm] {\bf\Huge{}\alert<5>{...}};
  \node<5->[left=of r2] {\bf\Huge{}\alert<5>{...}};
  \draw<5->[myarrow] (m2) -- (6);
  \draw<5->[myarrow] (r2) -- (m2);

  \node<6->[box, below=of 7, yshift=-0.6cm, onslide={<6>{draw=red}}] (t2) {Test++};
  \node<6->[box, below=of t2, yshift=-0.6cm, onslide={<6>{draw=red}}] (t3) {Test++};
  \node<6->[below=of t3, yshift=-0.6cm] {\bf\Huge{}\alert<6>{...}};
  \draw<6->[myarrow] (6) -- (t2);
  \draw<6->[myarrow] (6) -- (t3);

  \path<7-> (5) edge[<->, thick, dashed, "{\bf\alert<7>{Interface}}"] (m2);

  \node<8,9>[mytext3, below=of 5, yshift=-0.7cm] (b2) {Bottleneck};
  \draw<8,9>[myarrow2] (b2) -- (6);

  \node<9>[mytext4, above=of 6, yshift=0.7cm, xshift=0.5cm] (b3) {Dont allow\\degradation\\Backout fast};
  \draw<9>[myarrow2] (b3) -- (6);

  \frametitle<10>{Scalability, a practical example}


  \end{tikzpicture}
  \end{figure}
  #+END_EXPORT

* Modularization cont
  \pause
  - \myalert{2}{One developer/app should not stop flow for all} \pause
    - Bad quality \rightarrow You dont get to play \pause
    - \myalert{4}{Revert/recover first, fix later} \pause \bigskip


  - Needed: \pause
    - Clean interfaces \pause
    - Requirements \pause \bigskip


  - (Enabler of Agile!) \pause
    - More defined "sub" responsibilites, better backlogs \pause
    - Sub-orgs solve similar problems \rightarrow best solution wins! \pause
  - Shift-left principle \pause
    - Tests involving only one application tested in app integration
    - Move tests that often fail earlier in the loop \pause
      loops (or before)

* Modularization bad things
  - More spread out \pause
    - Harder to cooperate \pause
    - Multiple solutions to same problem (alignment) \pause
  - Permissions \pause
    - "/Why should you have access to my code?/" \pause \bigskip


  - "Box thinking" \pause
    - "My box is perfect" \rightarrow someone elses problem \pause \pause
    - Remember: \myalert{10}{All working for same goal}

  \begin{figure}
  \begin{tikzpicture}[overlay,auto, >=stealth', scale=0.8, node distance=0.5cm, every node/.style={transform shape}]
  \centering
  \draw[draw=none, use as bounding box] (-6.5,-5) rectangle (6.5,5);
  \node<8> at (0,3.5) {\includegraphics[width=14cm]{./engineering-fail}};
  \end{tikzpicture}
  \end{figure}

* Test failure
  - Test case fail \pause \rightarrow \myalert{2}{What do you do?}

* Logging
  - Remember Big CI Problems: \pause
    - Many tests+developers+apps/Tracking/Intermittency... \pause \bigskip


  - Test failed in App Integration \rightarrow \pause
    - Test failed before? (same way!) \pause
      - In same App/other apps? \pause
      - On certain configurations? \pause
    - Intermittent? \pause
      - More intermittent today than last week?

* Logging cont
  - Without data, we are blind to degradations \pause \bigskip


  - \myalert{2}{Solution: automatic result tracking!} \pause
    - Test failure messages, configurations, target log analysis \pause
  - /I.e. store test results and test meta data/

* Tracking of faults

* Scalability and feedback
  - Many developers, many repositories, many tests \pause
    - If a upload a change, what to test? \pause
  - \myalert{3}{Running everything all the time will cripple your CI} \pause
  - \myalert{4}{Running important tests to late will cripple feedback and slow down development!}

* Running all tests
  :PROPERTIES:
  :BEAMER_opt: fragile
  :END:

  \begin{bashcode*}{highlightlines=7}
  $ cd project-x
  $ . ci/setup.sh
  $ time apps/app00/test/test.sh
  ## Running tests for /home/solarus/projects/project-x/apps/app00
  # Doing complicated arithmetic (aka sleeping) for 8 seconds ...
  # Done!
  real  0m8.014s
  \end{bashcode*}
  \hspace{1cm}
  \onslide<2>
  \begin{bashcode*}{highlightlines=9}
  $ time find -name test.sh -exec {} \;
  ## Running tests for /home/solarus/projects/project-x/apps/app04
  # Doing complicated arithmetic (aka sleeping) for 0 seconds ...
  # Done!
  ...
  ## Running tests for /home/solarus/projects/project-x/apps/app03
  # Doing complicated arithmetic (aka sleeping) for 28 seconds ...
  # Done!
  real  11m13.586s
  \end{bashcode*}

#+BEGIN_EXPORT latex
\end{frame}
\againframe<10>{modularization}
#+END_EXPORT

* Scalability, a practical example
  - Parallelism \pause
    - Run as many test as possible at the same time \pause
  - Smart testing \pause
    - Run only tests related to the application/change \pause
  - Dynamic, developer driven, test scope \pause
    - Everyone should be able to add/remove test cases from gating
      guard \pause
    - Demystifies CI, less scary \pause
    - Developers are not relying on CI teams for guard update \pause
  - (Build avoidance) \pause
    - Cache build artifacts that has not changed \pause
    - =ccache=

* Scalability, summary
  - Run tests as early as possible \pause
    - Host test > target test \pause
  - Run tests only related to current change \pause
    - /Smart test scope/ \pause
    - Impossible without clean interfaces / separation of concerns \pause
  - Dynamic, developer driven, test scope \pause
    - Everyone should be able to add/remove test cases from gating
      guard \pause
    - Demystifies CI, less scary \pause
    - Developers are not relying on CI teams for guard update \pause
  - Parallelism and caching (build avoidance) is your friend \pause
  - \myalert{11}{Invest in architecture of application and CI together!}

* Reproducibility, a practical example

* Questions?
  \centering
  \includegraphics[width=10cm]{./Flow-Masters-logo}
